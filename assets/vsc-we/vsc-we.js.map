{"version":3,"file":"vsc-we.js","sources":["../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/lit-element/lib/updating-element.js","../node_modules/lit-element/lib/decorators.js","../node_modules/lit-element/lib/css-tag.js","../node_modules/lit-element/lit-element.js","../src/VscodeCheckbox.ts","../node_modules/lit-html/directives/class-map.js","../src/VscodeCollapsible.ts","../src/VscodeContextMenu.ts","../src/VscodeContextMenuItem.ts","../src/VscodeFormControl.ts","../src/VscodeFormDescription.ts","../src/VscodeFormItem.ts","../src/VscodeFormLabel.ts","../src/utils/getBaseURL.ts","../src/VscodeIcon.ts","../src/VscodeInputbox.ts","../src/VscodeOption.ts","../src/VscodeScrollable.ts","../src/VscodeSelect.ts","../src/VscodeTabs.ts","../node_modules/lit-html/directives/unsafe-html.js","../src/VscodeTree.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        // The Closure JS Compiler does not always preserve the correct \"this\"\n        // when calling static super methods (b/137460243), so explicitly bind.\n        super.finalize.call(this);\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","import { LitElement, html, css, property, customElement } from 'lit-element';\nimport { nothing } from 'lit-html';\n\n@customElement('vscode-checkbox')\nexport class VscodeCheckbox extends LitElement {\n  @property({ type: String }) label: string;\n  @property({ type: Boolean }) checked: boolean = false;\n  @property({ type: String }) value: string;\n\n  private _uid = `id_${new Date().valueOf()}_${Math.floor(Math.random() * 9999)}`;\n\n  private onElementClick() {\n    this.checked = !this.checked;\n\n    this.dispatchEvent(new CustomEvent('vsc-change', {\n      detail: {\n        checked: this.checked,\n        label: this.label,\n        value: this.value,\n      },\n      bubbles: true,\n      composed: true,\n    }));\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: inline-block;\n      }\n\n      .wrapper {\n        cursor: pointer;\n        display: block;\n        position: relative;\n        user-select: none;\n      }\n\n      .checkbox {\n        position: absolute;\n        height: 1px;\n        width: 1px;\n        overflow: hidden;\n        clip: rect(1px, 1px, 1px, 1px);\n        white-space: nowrap;\n      }\n\n      .icon {\n        background-color: var(--vscode-settings-checkboxBackground);\n        background-size: 16px;\n        border: 1px solid var(--vscode-settings-checkboxBorder);\n        border-radius: 3px;\n        box-sizing: border-box;\n        height: 18px;\n        left: 0;\n        margin-left: 0;\n        margin-right: 9px;\n        padding: 0;\n        pointer-events: none;\n        position: absolute;\n        top: 0;\n        width: 18px;\n      }\n\n      .label {\n        padding-left: 27px;\n      }\n\n      .label-text {\n        color: var(--vscode-breadcrumb-foreground);\n        cursor: pointer;\n        font-family: var(--vscode-font-family);\n        font-size: var(--vscode-font-size);\n        font-weight: var(--vscode-font-weight);\n        line-height: 1.4;\n      }\n    `;\n  };\n\n  render() {\n    const icon = html`<vscode-icon name=\"check\"></vscode-icon>`;\n    const check = this.checked ? icon : nothing;\n\n    return html`\n      <div class=\"wrapper\">\n        <input\n          id=\"${this._uid}\"\n          class=\"checkbox\"\n          type=\"checkbox\"\n          ?checked=\"${this.checked}\"\n          value=\"${this.value}\"\n        >\n        <div class=\"icon\">${check}</div>\n        <label for=\"${this._uid}\" class=\"label\" @click=\"${this.onElementClick}\">\n          <slot><span class=\"label-text\">${this.label}</span></slot>\n        </label>\n      </div>\n    `;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst classMapCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `classList` if the property value is truthy; if the property value\n * is falsey, the property name is removed from the element's `classList`. For\n * example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo) => (part) => {\n    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== 'class' || part.committer.parts.length > 1) {\n        throw new Error('The `classMap` directive must be used in the `class` attribute ' +\n            'and must be the only part in the attribute.');\n    }\n    const { committer } = part;\n    const { element } = committer;\n    // handle static classes\n    if (!classMapCache.has(part)) {\n        element.className = committer.strings.join(' ');\n    }\n    const { classList } = element;\n    // remove old classes that no longer apply\n    const oldInfo = classMapCache.get(part);\n    for (const name in oldInfo) {\n        if (!(name in classInfo)) {\n            classList.remove(name);\n        }\n    }\n    // add new classes\n    for (const name in classInfo) {\n        const value = classInfo[name];\n        if (!oldInfo || value !== oldInfo[name]) {\n            // We explicitly want a loose truthy check here because\n            // it seems more convenient that '' and 0 are skipped.\n            const method = value ? 'add' : 'remove';\n            classList[method](name);\n        }\n    }\n    classMapCache.set(part, classInfo);\n});\n//# sourceMappingURL=class-map.js.map","import { LitElement, html, css, property, customElement } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map';\n\n@customElement('vscode-collapsible')\nexport class VscodeCollapsible extends LitElement {\n  @property({ type: Number }) tabIndex: number = 0;\n  @property({ type: String }) title: string;\n  @property({ type: Boolean }) open: boolean;\n\n  private onHeaderClick() {\n    this.open = !this.open;\n  }\n\n  static get styles() {\n    return css`\n      .collapsible {\n        background-color: var(--vscode-sideBar-background);\n      }\n\n      .collapsible-header {\n        align-items: center;\n        background-color: var(--vscode-sideBarSectionHeader-background);\n        cursor: pointer;\n        display: flex;\n        height: 22px;\n        line-height: 22px;\n        user-select: none;\n      }\n\n      .collapsible-header:focus {\n        opacity: 1;\n        outline-offset: -1px;\n        outline-style: solid;\n        outline-width: 1px;\n        outline-color: var(--vscode-focusBorder);\n      }\n\n      .collapsible-header h3 {\n        color: var(--vscode-sideBarTitle-foreground);\n        font-size: 11px;\n        font-weight: 700;\n        margin: 0;\n        text-transform: uppercase;\n      }\n\n      .header-icon {\n        display: block;\n        margin: 0 3px;\n      }\n\n      .collapsible.open .header-icon {\n        transform: rotate(90deg);\n      }\n\n      .actions {\n        margin-left: auto;\n        margin-right: 4px;\n        opacity: 0;\n      }\n\n      .collapsible:hover .actions {\n        opacity: 1;\n      }\n\n      slot[name=actions]::slotted(div) {\n        align-items: center;\n        display: flex;\n      }\n\n      .collapsible-body {\n        display: none;\n        overflow: hidden;\n      }\n\n      .collapsible.open .collapsible-body {\n        display: block;\n      }\n    `;\n  }\n\n  render() {\n    const classes = classMap({ collapsible: true, open: this.open });\n\n    const icon = html`<vscode-icon name=\"chevron-right\" class=\"header-icon\"></vscode-icon>`;\n\n    return html`\n      <div class=\"${classes}\">\n        <div\n          class=\"collapsible-header\"\n          tabindex=\"${this.tabIndex}\"\n          title=\"${this.title}\"\n          @click=\"${this.onHeaderClick}\"\n        >\n          ${icon}\n          <h3 class=\"title\">${this.title}</h3>\n          <div class=\"actions\"><slot name=\"actions\"></slot></div>\n        </div>\n        <div class=\"collapsible-body\">\n          <div>\n            <slot name=\"body\"></slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n}\n","import { LitElement, html, css, property, customElement } from 'lit-element';\nimport { nothing } from 'lit-html';\n\ninterface MenuItemData {\n  label: string;\n  keybinding?: string;\n  value?: string;\n  separator?: boolean;\n  tabindex?: number;\n}\n\n@customElement('vscode-context-menu')\nexport class VscodeContextMenu extends LitElement {\n  @property({ type: Array }) data: MenuItemData[];\n  @property({ type: Boolean }) show: boolean = true;\n\n  private onItemClick(event: CustomEvent) {\n    const { detail } = event;\n\n    this.dispatchEvent(new CustomEvent('vsc-select', {\n      detail,\n      bubbles: true,\n      composed: true,\n    }));\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n        font-family: var(--vscode-font-family);\n        font-size: var(--vscode-font-size);\n        font-weight: var(--vscode-font-weight);\n        line-height: 1.4em;\n        position: relative;\n      }\n\n      .context-menu {\n        background-color: var(--vscode-menu-background);\n        box-shadow: 0 2px 8px var(--vscode-widget-shadow);\n        color: var(--vscode-menu-foreground);\n        padding: .5em 0;\n        white-space: nowrap;\n      }\n\n      .context-menu-item {\n        border: 1px solid transparent;\n        display: flex;\n        user-select: none;\n      }\n\n      .rule {\n        border-bottom: 1px solid var(--vscode-menu-separatorBackground);\n        display: block;\n        margin: 0 .8em .2em;\n        opacity: .4;\n        padding-top: .2em;\n        width: 100%;\n      }\n\n      .context-menu-item a {\n        align-items: center;\n        color: var(--vscode-menu-foreground);\n        cursor: default;\n        display: flex;\n        flex: 1 1 auto;\n        height: 2em;\n        outline: none;\n        position: relative;\n        text-decoration: inherit;\n      }\n\n      .context-menu-item a:hover,\n      .context-menu-item a:focus {\n        background-color: var(--vscode-menu-selectionBackground);\n        color: var(--vscode-menu-selectionForeground);\n      }\n\n      .label {\n        background: none;\n        display: flex;\n        flex: 1 1 auto;\n        font-size: 12px;\n        line-height: 1;\n        padding: 0 2em;\n        text-decoration: none;\n      }\n\n      .keybinding {\n        display: block;\n        flex: 2 1 auto;\n        line-height: 1;\n        padding: 0 2em;\n        text-align: right;\n      }\n    `;\n  };\n\n  render() {\n    const menu = html`\n      <div class=\"context-menu\">\n        ${this.data ?\n          this.data.map(({\n            label = '',\n            keybinding = '',\n            value = '',\n            separator = false,\n            tabindex = ''\n          }) => html`\n            <vscode-context-menu-item\n              label=\"${label}\"\n              keybinding=\"${keybinding}\"\n              value=\"${value}\"\n              ?separator=\"${separator}\"\n              tabindex=\"${tabindex}\"\n              @vsc-click=\"${this.onItemClick}\"\n            ></vscode-context-menu-item>\n          `) :\n          html`<slot></slot>`\n        }\n      </div>\n    `;\n\n    return html`\n      ${this.show ?\n        menu :\n        nothing\n      }\n    `;\n  }\n}\n","import { LitElement, html, css, property, customElement } from 'lit-element';\nimport { nothing } from 'lit-html';\n\n@customElement('vscode-context-menu-item')\nexport class VscodeContextMenuItem extends LitElement {\n  @property({ type: String }) label: string;\n  @property({ type: String }) keybinding: string;\n  @property({ type: String }) value: string;\n  @property({ type: Boolean }) separator: boolean = false;\n  @property({ type: Number }) tabindex: number;\n\n  private onItemClick() {\n    this.dispatchEvent(new CustomEvent('vsc-click', {\n      detail: {\n        label: this.label,\n        keybinding: this.keybinding,\n        value: this.value || this.label,\n        separator: this.separator,\n        tabindex: this.tabindex,\n      },\n      bubbles: true,\n      composed: true,\n    }));\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n        font-family: var(--vscode-font-family);\n        font-size: var(--vscode-font-size);\n        font-weight: var(--vscode-font-weight);\n        line-height: 1.4em;\n        outline: none;\n        position: relative;\n      }\n\n      .context-menu-item {\n        background-color: var(--vscode-menu-background);\n        color: var(--vscode-menu-foreground);\n        border: 1px solid transparent;\n        display: flex;\n        user-select: none;\n        white-space: nowrap;\n      }\n\n      .rule {\n        border-bottom: 1px solid var(--vscode-menu-separatorBackground);\n        display: block;\n        margin: 0 .8em .2em;\n        opacity: .4;\n        padding-top: .2em;\n        width: 100%;\n      }\n\n      .context-menu-item a {\n        align-items: center;\n        color: var(--vscode-menu-foreground);\n        cursor: default;\n        display: flex;\n        flex: 1 1 auto;\n        height: 2em;\n        outline: none;\n        position: relative;\n        text-decoration: inherit;\n      }\n\n      .context-menu-item a:hover,\n      :host-context(:focus) .context-menu-item a {\n        background-color: var(--vscode-menu-selectionBackground);\n        color: var(--vscode-menu-selectionForeground);\n      }\n\n      .label {\n        background: none;\n        display: flex;\n        flex: 1 1 auto;\n        font-size: 12px;\n        line-height: 1;\n        padding: 0 2em;\n        text-decoration: none;\n      }\n\n      .keybinding {\n        display: block;\n        flex: 2 1 auto;\n        line-height: 1;\n        padding: 0 2em;\n        text-align: right;\n      }\n    `;\n  };\n\n  render() {\n    return html`\n      ${this.separator ?\n        html`\n          <div class=\"context-menu-item separator\">\n            <span class=\"rule\"></span>\n          </div>\n        ` :\n        html`\n          <div class=\"context-menu-item\">\n            <a @click=\"${this.onItemClick}\">\n              ${this.label ? html`<span class=\"label\">${this.label}</span>` : nothing}\n              ${this.keybinding ? html`<span class=\"keybinding\">${this.keybinding}</span>` : nothing}\n            </a>\n          </div>\n        `\n      }\n    `;\n  }\n}\n","import { LitElement, html, css, customElement } from 'lit-element';\n\n@customElement('vscode-form-control')\nexport class VscodeFormControl extends LitElement {\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n        margin-top: 9px;\n      }\n    `;\n  }\n\n  render() {\n    return html`\n      <slot></slot>\n    `;\n  }\n}\n","import { LitElement, html, css, customElement } from 'lit-element';\n\n@customElement('vscode-form-description')\nexport class VscodeFormDescription extends LitElement {\n  static get styles() {\n    return css`\n      :host {\n        color: var(--vscode-foreground);\n        cursor: default;\n        display: block;\n        font-family: var(--vscode-font-family);\n        font-size: var(--vscode-font-size);\n        line-height: 1.4;\n        margin: 3px 0;\n        opacity: 0.9;\n        overflow: hidden;\n        user-select: text;\n      }\n\n      ::slotted(a),\n      ::slotted(a:visited) {\n        color: var(--vscode-textLink-foreground);\n        text-decoration: none;\n      }\n\n      ::slotted(a:hover),\n      ::slotted(a:active) {\n        color: var(--vscode-textLink-activeForeground);\n        text-decoration: underline;\n      }\n\n      ::slotted(code) {\n        color: var(--vscode-textPreformat-foreground);\n      }\n\n      ::slotted(p) {\n        line-height: 1.4;\n        margin-bottom: 9px;\n        margin-top: 9px;\n      }\n\n      ::slotted(p:first-child) {\n        margin-top: 0;\n      }\n\n      ::slotted(p:last-child) {\n        margin-bottom: 0;\n      }\n    `;\n  }\n\n  render() {\n    return html`\n      <slot></slot>\n    `;\n  }\n}\n","import { LitElement, html, css, customElement } from 'lit-element';\n\n@customElement('vscode-form-item')\nexport class VscodeFormItem extends LitElement {\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n        padding: 12px 0 18px;\n      }\n    `;\n  }\n\n  render() {\n    return html`\n      <slot></slot>\n    `;\n  }\n}\n","import { LitElement, html, css, customElement } from 'lit-element';\n\n@customElement('vscode-form-label')\nexport class VscodeFormLabel extends LitElement {\n  static get styles() {\n    return css`\n      :host {\n        color: var(--vscode-foreground);\n        cursor: default;\n        display: block;\n        font-family: var(--vscode-font-family);\n        font-size: var(--vscode-font-size);\n        font-weight: 600;\n        line-height: 1.4;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        user-select: text;\n        white-space: nowrap;\n      }\n\n      ::slotted(b) {\n        font-weight: 600;\n        opacity: 0.9;\n      }\n    `;\n  }\n\n  render() {\n    return html`\n      <slot></slot>\n    `;\n  }\n}\n","let memoizedURL: string;\n\nconst getBaseURL = () => {\n  if (memoizedURL) {\n    return memoizedURL;\n  }\n\n  const s = (<HTMLScriptElement>document.querySelector('script[src*=\"vsc-we\"]'));\n\n  if (s) {\n    const matches = /(.+\\/)vsc-we/g.exec(s.src);\n\n    if (!matches) {\n      memoizedURL = '';\n      return memoizedURL;\n    }\n\n    memoizedURL = matches[1];\n    return memoizedURL;\n  }\n\n  memoizedURL = '';\n  return memoizedURL;\n}\n\nexport default getBaseURL;\n","import { LitElement, html, css, property, customElement } from 'lit-element';\nimport getBaseURL from './utils/getBaseURL';\n\nconst BASE_URL = getBaseURL();\n\n@customElement('vscode-icon')\nexport class VscodeIcon extends LitElement {\n  @property({ type: String }) name: string;\n  @property({ type: Number }) size: number = 16;\n\n  static get styles() {\n    return css`\n      :host {\n        display: inline-block;\n      }\n\n      span {\n        background-position: center center;\n        background-repeat: no-repeat;\n        background-size: contain;\n        display: block;\n      }\n    `;\n  }\n\n  render() {\n    const size = `${this.size}px`;\n\n    return html`\n      <style>\n        span {\n          height: ${size};\n          width: ${size};\n        }\n\n        :host-context(.vscode-light) span {\n          background-image: url(${BASE_URL}icons/light/${this.name}.svg);\n        }\n\n        :host-context(.vscode-dark) span,\n        :host-context(.vscode-high-contrast) span {\n          background-image: url(${BASE_URL}icons/dark/${this.name}.svg);\n        }\n      </style>\n      <span></span>\n    `;\n  }\n}\n","import { LitElement, html, css, property, customElement } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map';\n\nenum Severity {\n  DEFAULT = 'default',\n  INFO = 'info',\n  WARNING = 'warning',\n  ERROR = 'error',\n};\n\nenum InputType {\n  COLOR = 'color',\n  DATE = 'date',\n  DATETIME_LOCAL = 'datetime-local',\n  EMAIL = 'email',\n  FILE = 'file',\n  MONTH = 'month',\n  NUMBER = 'number',\n  PASSWORD = 'password',\n  TEL = 'tel',\n  TEXT = 'text',\n  TIME = 'time',\n  URL = 'url',\n  WEEK = 'week',\n}\n\nconst LINE_HEIGHT = 17;\nconst PADDING = 4;\nconst BORDER_WIDTH = 1;\n\n@customElement('vscode-inputbox')\nexport class VscodeInputbox extends LitElement {\n  @property({ type: Boolean }) multiline = false;\n  @property({ type: String }) message = '';\n  @property({ type: String })\n  set severity(val: string) {\n    const oldVal = this._severity;\n\n    switch (val) {\n      case Severity.INFO:\n      case Severity.WARNING:\n      case Severity.ERROR:\n        this._severity = val;\n        break;\n      default:\n        this._severity = Severity.DEFAULT;\n    }\n\n    this.requestUpdate('messageSeverity', oldVal);\n  }\n  get severity(): string {\n    return this._severity;\n  }\n  @property({ type: Boolean }) panelInput = false;\n  @property({ type: String })\n  set type(val: string) {\n    const oldVal = this._type;\n\n    switch(val) {\n      case InputType.COLOR:\n      case InputType.DATE:\n      case InputType.DATETIME_LOCAL:\n      case InputType.EMAIL:\n      case InputType.FILE:\n      case InputType.MONTH:\n      case InputType.NUMBER:\n      case InputType.PASSWORD:\n      case InputType.TEL:\n      case InputType.TEXT:\n      case InputType.TIME:\n      case InputType.URL:\n      case InputType.WEEK:\n        this._type = val;\n        break;\n      default:\n        this._type = InputType.TEXT;\n    }\n\n    this.requestUpdate('type', oldVal);\n  }\n  get type(): string {\n    return this._type;\n  }\n  @property({ type: Boolean }) focused: boolean = false;\n  @property({ type: String }) value: string = '';\n  @property({ type: String }) placeholder: string = '';\n  @property({ type: Number }) lines: number = 2;\n  @property({ type: Number }) maxLines: number = 5;\n\n  private _severity: Severity;\n  private _type: InputType;\n  private _currentLines: number;\n  private _textareaDefaultCursor: boolean = false;\n\n  constructor() {\n    super();\n    this._severity = Severity.DEFAULT;\n    this._type = InputType.TEXT;\n    this._currentLines = this.lines;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.resizeTextareaIfRequired();\n  }\n\n  updated(changedProperties: Map<string, undefined | string | boolean | number>) {\n    if (changedProperties.has('value')) {\n      this.resizeTextareaIfRequired();\n    }\n  }\n\n  private onInputFocus = () => {\n    this.focused = true;\n  };\n\n  private onInputBlur = () => {\n    this.focused = false;\n  }\n\n  private onInputChange = (event: InputEvent) => {\n    const eventTarget = (<HTMLInputElement | HTMLTextAreaElement>event.target);\n\n    this.dispatchEvent(new CustomEvent('vsc-input', {\n      detail: eventTarget.value,\n      bubbles: true,\n      composed: true,\n    }));\n\n    this.value = eventTarget.value;\n    this.resizeTextareaIfRequired();\n  }\n\n  private onTextareaMouseMove = (event: MouseEvent) => {\n    const br = this.getBoundingClientRect();\n    const x = event.clientX;\n    const SCROLLBAR_WIDTH = 10;\n\n    this._textareaDefaultCursor =\n      x <= br.left + br.width && x >= br.left + br.width - SCROLLBAR_WIDTH - BORDER_WIDTH * 2;\n\n    this.requestUpdate();\n  }\n\n  private resizeTextareaIfRequired = (): void => {\n    if (this.multiline) {\n      const newLineChars = this.value.match(/\\n/g);\n      const numLines = newLineChars ? newLineChars.length + 1 : 1;\n      this._currentLines = Math.min(Math.max(numLines, this.lines), this.maxLines);\n      this.requestUpdate();\n    }\n  };\n\n  static get styles() {\n    return css`\n      .container {\n        position: relative;\n      }\n\n      .cursor-default {\n        cursor: default;\n      }\n\n      textarea {\n        overflow: visible;\n        resize: none;\n      }\n\n      textarea::-webkit-scrollbar {\n        cursor: default;\n        width: 10px;\n      }\n\n      textarea::-webkit-scrollbar-button {\n        display: none;\n      }\n\n      textarea::-webkit-scrollbar-track {\n        background-color: transparent;\n        width: 10px;\n      }\n\n      textarea::-webkit-scrollbar-thumb {\n        background-color: transparent;\n      }\n\n      textarea:hover::-webkit-scrollbar-thumb {\n        background-color: var(--vscode-scrollbarSlider-background);\n      }\n\n      textarea:hover::-webkit-scrollbar-thumb:hover {\n        background-color: var(--vscode-scrollbarSlider-hoverBackground);\n      }\n\n      textarea:hover::-webkit-scrollbar-thumb:active {\n        background-color: var(--vscode-scrollbarSlider-activeBackground);\n      }\n\n      input,\n      textarea {\n        background-color: var(--vscode-input-background);\n        border-color: var(--vscode-we-input-border, var(--vscode-settings-textInputBorder));\n        border-style: solid;\n        border-width: 1px;\n        box-sizing: border-box;\n        color: var(--vscode-input-foreground);\n        display: block;\n        font-family: inherit;\n        line-height: 17px;\n        outline: none;\n        padding: 4px;\n        width: 100%;\n      }\n\n      input::placeholder,\n      textarea::placeholder {\n        color: var(--vscode-input-placeholderForeground);\n      }\n\n      input:focus,\n      textarea:focus {\n        border-color: var(--vscode-focusBorder);\n      }\n\n      .container.panel-input input,\n      .container.panel-input textarea {\n        border-color: var(--vscode-panelInput-border);\n      }\n\n      .container.default input,\n      .container.default textarea,\n      .container.panel-input.default input,\n      .container.panel-input.default textarea {\n        border-color: var(--vscode-focusBorder);\n      }\n\n      .container.info input,\n      .container.info textarea,\n      .container.panel-input.info input,\n      .container.panel-input.info textarea {\n        border-color: var(--vscode-inputValidation-infoBorder);\n      }\n\n      .container.warning input,\n      .container.warning textarea,\n      .container.panel-input.warning input,\n      .container.panel-input.warning textarea {\n        border-color: var(--vscode-inputValidation-warningBorder);\n      }\n\n      .container.error input,\n      .container.error textarea,\n      .container.panel-input.error input,\n      .container.panel-input.error textarea {\n        border-color: var(--vscode-inputValidation-errorBorder);\n      }\n\n      .message {\n        border-style: solid;\n        border-width: 1px;\n        box-sizing: border-box;\n        display: none;\n        font-size: 12px;\n        line-height: 17px;\n        margin-top: -1px;\n        overflow: hidden;\n        padding: .4em;\n        position: absolute;\n        user-select: none;\n        top: 100%;\n        text-align: left;\n        width: 100%;\n        word-wrap: break-word;\n      }\n\n      .focused:not(.default) .message {\n        display: block;\n      }\n\n      .message.default {\n        background-color: var(--vscode-editor-background);\n        border-color: var(--vscode-focusBorder);\n      }\n\n      .message.info {\n        background-color: var(--vscode-inputValidation-infoBackground);\n        border-color: var(--vscode-inputValidation-infoBorder);\n      }\n\n      .message.warning {\n        background-color: var(--vscode-inputValidation-warningBackground);\n        border-color: var(--vscode-inputValidation-warningBorder);\n      }\n\n      .message.error {\n        background-color: var(--vscode-inputValidation-errorBackground);\n        border-color: var(--vscode-inputValidation-errorBorder);\n      }\n    `;\n  }\n\n  render() {\n    const textarea = html`\n      <textarea\n        @focus=\"${this.onInputFocus}\"\n        @blur=\"${this.onInputBlur}\"\n        @input=\"${this.onInputChange}\"\n        @mousemove=\"${this.onTextareaMouseMove}\"\n        class=\"${classMap({ 'cursor-default': this._textareaDefaultCursor })}\"\n        placeholder=\"${this.placeholder}\"\n        .value=\"${this.value}\"\n      ></textarea>\n    `;\n    const input = html`\n      <input\n        type=\"${this.type}\"\n        @focus=\"${this.onInputFocus}\"\n        @blur=\"${this.onInputBlur}\"\n        @input=\"${this.onInputChange}\"\n        placeholder=\"${this.placeholder}\"\n        .value=\"${this.value}\"\n      >\n    `;\n    const textareaHeight = `${BORDER_WIDTH * 2 + PADDING * 2 + this._currentLines * LINE_HEIGHT}px`;\n    const message = html`\n      <div class=\"message ${this.severity}\">\n        ${this.message}\n      </div>\n    `;\n    let containerClass = 'container';\n\n    if (this.severity !== Severity.DEFAULT) {\n      containerClass += ` ${this.severity}`;\n    }\n\n    if (this.focused) {\n      containerClass += ' focused';\n    }\n\n    return html`\n      <style>\n        textarea {\n          height: ${textareaHeight};\n        }\n      </style>\n      <div class=\"${containerClass}\">\n        ${this.multiline ? textarea : input}\n        ${this.message ? message : ''}\n      </div>\n    `;\n  }\n}\n","import { LitElement, html, css, property, customElement } from 'lit-element';\n\n@customElement('vscode-option')\nexport class VscodeOption extends LitElement {\n  @property({ type: String }) value: string = '';\n  @property({ type: String }) description: string = '';\n\n  private _mainSlot;\n\n  firstUpdated() {\n    this._mainSlot = this.shadowRoot.querySelector('slot');\n\n    if (this._mainSlot) {\n      this._mainSlot.addEventListener('slotchange', this._onSlotChange.bind(this));\n    }\n  }\n\n  private _onSlotChange(event: Event) {\n    this.dispatchEvent(new CustomEvent('vsc-slotchange', {\n      detail: {\n        innerText: this.innerText,\n      },\n      composed: true,\n      bubbles: false,\n    }));\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        color: var(--vscode-foreground);\n        display: block;\n        font-size: var(--vscode-font-size);\n        line-height: 1.3;\n        padding: 1px 3px;\n        user-select: none;\n      }\n\n      :host(:hover) {\n        background-color: var(--vscode-list-focusBackground);\n      }\n    `;\n  }\n\n  render() {\n    return html`\n      <slot></slot>\n    `;\n  }\n}\n","import { LitElement, html, css, property, customElement } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map';\n\n@customElement('vscode-scrollable')\nexport class VscodePanel extends LitElement {\n  @property({ type: Boolean }) shadow: boolean = true;\n  @property({ type: Boolean, reflect: false }) scrolled: boolean = false;\n\n  private scrollableContainer: HTMLDivElement;\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.requestUpdate().then(() => {\n      this.scrollableContainer = this.shadowRoot.querySelector('.scrollable-container');\n      this.scrollableContainer.addEventListener(\n        'scroll',\n        this.onScrollableContainerScroll.bind(this)\n      );\n    });\n  }\n\n  private onScrollableContainerScroll() {\n    this.scrolled = this.scrollableContainer.scrollTop > 0;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n        position: relative;\n      }\n\n      .scrollable-container {\n        height: 100%;\n        overflow: auto;\n      }\n\n      .scrollable-container::-webkit-scrollbar {\n        cursor: default;\n        width: 10px;\n      }\n\n      .scrollable-container::-webkit-scrollbar-button {\n        display: none;\n      }\n\n      .scrollable-container:hover::-webkit-scrollbar-button {\n        display: none;\n      }\n\n      .scrollable-container::-webkit-scrollbar-track {\n        background-color: transparent;\n        width: 10px;\n      }\n\n      .scrollable-container::-webkit-scrollbar-thumb {\n        background-color: transparent;\n      }\n\n      .scrollable-container:hover::-webkit-scrollbar-thumb {\n        background-color: var(--vscode-scrollbarSlider-background);\n      }\n\n      .scrollable-container:hover::-webkit-scrollbar-thumb:hover {\n        background-color: var(--vscode-scrollbarSlider-hoverBackground);\n      }\n\n      .scrollable-container:hover::-webkit-scrollbar-thumb:active {\n        background-color: var(--vscode-scrollbarSlider-activeBackground);\n      }\n\n      .shadow {\n        box-shadow: var(--vscode-scrollbar-shadow) 0 6px 6px -6px inset;\n        display: none;\n        height: 3px;\n        left: 0;\n        pointer-events: none;\n        position: absolute;\n        top: 0;\n        z-index: 1;\n        width: 100%;\n      }\n\n      .shadow.visible {\n        display: block;\n      }\n\n      .content {\n        overflow: hidden;\n      }\n    `;\n  };\n\n  render() {\n    const shadowClasses = classMap({ shadow: true, visible: this.scrolled });\n\n    return html`\n      <div class=\"scrollable-container\">\n        <div class=\"${shadowClasses}\"></div>\n        <div class=\"content\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n}\n","import { LitElement, html, css, property, customElement } from 'lit-element';\nimport { nothing, TemplateResult } from 'lit-html';\n\ninterface Option {\n  label: string;\n  value: string;\n  description?: string;\n}\n\ninterface OptionElement extends HTMLElement {\n  label: string;\n  value: string;\n  description?: string;\n}\n\n@customElement('vscode-select')\nexport class VscodeSelect extends LitElement {\n  @property({ type: String }) value: string = '';\n  @property({ type: Array, reflect: false })\n  set options(val: Option[]) {\n    this._options = val;\n    this._currentLabel = this.options[this.selectedIndex].label;\n    this.requestUpdate();\n  }\n  get options(): Option[] {\n    return this._options;\n  }\n  @property({ type: Number }) defaultIndex: number = 0;\n  @property({ type: Number }) selectedIndex: number = 0;\n  @property({ type: Number, reflect: true }) tabIndex: number = -1;\n\n  private _showDropdown: boolean = false;\n  private _currentDescription: string;\n  private _mainSlot: HTMLSlotElement;\n  private _options: Option[];\n  private _currentLabel: string;\n\n  constructor() {\n    super();\n    this.selectedIndex = 0;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('click', this._onClickOutside.bind(this));\n  }\n\n  disconnectedCallback() {\n    super.connectedCallback();\n    window.removeEventListener('click', this._onClickOutside);\n  }\n\n  firstUpdated() {\n    this._mainSlot = this.shadowRoot.querySelector('slot');\n\n    if (this._mainSlot) {\n      this._mainSlot.addEventListener('slotchange', this._onSlotChange.bind(this));\n    }\n  }\n\n  private _onSlotChange(event: Event) {\n    const nodes = this._mainSlot.assignedNodes();\n    const l = nodes.length;\n\n    if (\n      l < 1 ||\n      nodes[l - 1].nodeType !== Node.ELEMENT_NODE ||\n      (<Element>nodes[l - 1]).tagName.toLowerCase() !== 'vscode-option'\n    ) {\n      return;\n    }\n\n    const optElements = nodes.filter(\n      el =>\n        el.nodeType === Node.ELEMENT_NODE &&\n        (<Element>el).tagName.toLowerCase() === 'vscode-option'\n    );\n\n    const lastInsertedIndex = optElements.length - 1;\n    const lastInserted = (optElements[lastInsertedIndex]) as Element;\n\n    if (lastInserted.tagName.toLowerCase() === 'vscode-option') {\n      const el = (<OptionElement>lastInserted);\n\n      el.dataset.index = String(lastInsertedIndex);\n      el.addEventListener('click', this._onOptionClick.bind(this));\n      el.addEventListener('mouseenter', this._onOptionMouseEnter.bind(this));\n      el.addEventListener('mouseleave', this._onOptionMouseLeave.bind(this));\n      el.addEventListener('vsc-slotchange', this._onOptionSlotChange.bind(this));\n    }\n\n    if (lastInsertedIndex === this.selectedIndex) {\n      this._currentLabel = (<OptionElement>lastInserted).innerText;\n      this.requestUpdate();\n    }\n  }\n\n  private _onClickOutside(event: MouseEvent) {\n    if (event.target !== this) {\n      this._showDropdown = false;\n      this.requestUpdate();\n    }\n  }\n\n  private _toogleDropdown() {\n    this._showDropdown = !this._showDropdown;\n    this.requestUpdate();\n  }\n\n  private _onFaceClick() {\n    this._toogleDropdown();\n  }\n\n  private _onOptionMouseEnter(event: MouseEvent) {\n    const element = event.target as OptionElement;\n\n    this._currentDescription = element.description || undefined;\n    this.requestUpdate();\n  }\n\n  private _onOptionMouseLeave() {\n    this._currentDescription = '';\n    this.requestUpdate();\n  }\n\n  private _onOptionClick(event: MouseEvent) {\n    const path = event.composedPath();\n    const optionElement = (<OptionElement>path[0]);\n\n    this.selectedIndex = Number(optionElement.dataset.index);\n    this.value = optionElement.value || optionElement.innerText;\n    this._currentLabel = optionElement.innerText;\n    this._showDropdown = false;\n\n    this.dispatchEvent(new CustomEvent('vsc-change', {\n      detail: {\n        value: this.value,\n      },\n    }));\n\n    this.requestUpdate();\n  }\n\n  private _onOptionSlotChange(event: CustomEvent) {\n    const optionElement = event.composedPath()[0] as OptionElement;\n\n    if (Number(optionElement.dataset.index) === this.selectedIndex) {\n      this._currentLabel = event.detail.innerText;\n      this.requestUpdate();\n    }\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: inline-block;\n        outline: none;\n        position: relative;\n        width: 320px;\n      }\n\n      .select-face {\n        background-color: var(--vscode-settings-textInputBackground);\n        border-color: var(--vscode-settings-textInputBorder);\n        border-style: solid;\n        border-width: 1px;\n        box-sizing: border-box;\n        color: var(--vscode-foreground);\n        font-family: var(--vscode-font-family);\n        font-size: var(--vscode-font-size);\n        font-weight: var(--vscode-font-weight);\n        line-height: 1.3;\n        padding: 4px;\n        position: relative;\n        user-select: none;\n        width: 100%;\n      }\n\n      .select-face:after {\n        border-color: var(--vscode-foreground) transparent transparent transparent;\n        border-style: solid;\n        border-width: 6px 3px;\n        content: '';\n        display: block;\n        margin-top: -3px;\n        position: absolute;\n        right: 6px;\n        top: 50%;\n        z-index: 1;\n      }\n\n      :host(:focus) .select-face {\n        border-color: var(--vscode-focusBorder);\n      }\n\n      .dropdown {\n        background-color: var(--vscode-settings-textInputBackground);\n        border-color: var(--vscode-settings-dropdownBorder);\n        border-style: solid;\n        border-width: 1px;\n        box-sizing: border-box;\n        left: 0;\n        position: absolute;\n        top: 26px;\n        width: 100%;\n        z-index: 2;\n      }\n\n      :host(:focus) .dropdown {\n        border-color: var(--vscode-focusBorder);\n      }\n\n      .options {\n        box-sizing: border-box;\n        cursor: pointer;\n        padding: 1px;\n      }\n\n      .option:hover {\n        background-color: var(--vscode-list-hoverBackground);\n      }\n\n      .description {\n        border-color: var(--vscode-settings-dropdownBorder);\n        border-style: solid;\n        border-width: 1px 0 0;\n        color: var(--vscode-foreground);\n        font-family: var(--vscode-font-family);\n        font-size: var(--vscode-font-size);\n        font-weight: var(--vscode-font-weight);\n        line-height: 1.3;\n        padding: 6px 4px;\n      }\n    `;\n  };\n\n  render() {\n    let descriptionTemplate: TemplateResult | Object;\n    let optionsTemplate: TemplateResult | Object;\n\n    if (this._currentDescription) {\n      descriptionTemplate = html`<div class=\"description\">${this._currentDescription}</div>`;\n    } else {\n      descriptionTemplate = nothing;\n    }\n\n    if (this.options) {\n      optionsTemplate = this.options.map((op, index) => html`\n        <vscode-option\n          @click=\"${this._onOptionClick}\"\n          @mouseenter=\"${this._onOptionMouseEnter}\"\n          @mouseleave=\"${this._onOptionMouseLeave}\"\n          description=\"${op.description || ''}\"\n          data-index=\"${index}\"\n          value=\"${op.value}\"\n        >${op.label}</vscode-option>\n      `);\n    } else {\n      optionsTemplate = html`<slot></slot>`;\n    }\n\n    const display = this._showDropdown === true ? 'block' : 'none';\n\n    return html`\n      <style>\n        .dropdown {\n          display: ${display};\n        }\n      </style>\n      <div class=\"select-face\" @click=\"${this._onFaceClick}\">${this._currentLabel}</div>\n      <div class=\"dropdown\">\n        <div class=\"options\">\n          ${optionsTemplate}\n        </div>\n        ${descriptionTemplate}\n      </div>\n    `;\n  }\n}\n","import { LitElement, html, css, property, customElement } from 'lit-element';\n\n@customElement('vscode-tabs')\nexport class VscodeTabs extends LitElement {\n  @property({ type: Number }) selected: number = 0;\n\n  private _headerSlot: HTMLSlotElement;\n  private _mainSlot: HTMLSlotElement;\n\n  private _setActiveTab() {\n    Array.from(this._mainSlot.assignedElements()).forEach((el: HTMLElement, i) => {\n      el.style.display = i === this.selected ? 'block' : 'none';\n    });\n\n    Array.from(this._headerSlot.assignedElements()).forEach((el: HTMLElement, i) => {\n      el.dataset.index = String(i);\n      el.classList.toggle('is-active', i === this.selected);\n    });\n\n    this.dispatchEvent(new CustomEvent('vsc-select', {\n      detail: {\n        selected: this.selected,\n      },\n      composed: true,\n    }));\n  }\n\n  private _onSlotChanged() {\n    this._setActiveTab();\n  }\n\n  private _onHeaderClick(event: MouseEvent) {\n    const index = (<HTMLElement>event.target).dataset.index;\n\n    if (!index) {\n      return;\n    }\n\n    this.selected = Number(index);\n    this._setActiveTab();\n  }\n\n  firstUpdated() {\n    this._headerSlot = this.shadowRoot.querySelector('slot[name=header]');\n    this._mainSlot = this.shadowRoot.querySelector('slot:not([name=header])');\n\n    this._mainSlot.addEventListener(\n      'slotchange',\n      this._onSlotChanged.bind(this)\n    );\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n\n      .header {\n        display: flex;\n        font-family: var(--vscode-font-family);\n        font-size: var(--vscode-font-size);\n        font-weight: var(--vscode-font-weight);\n        width: 100%;\n      }\n\n      :host-context(.vscode-light) .header {\n        border-bottom: 1px solid #ccc;\n      }\n\n      ::slotted(header) {\n        border-bottom: 1px solid transparent;\n        color: var(--vscode-foreground);\n        cursor: pointer;\n        display: block;\n        margin-bottom: -1px;\n        overflow: hidden;\n        padding: 7px 8px;\n        text-overflow: ellipsis;\n        user-select: none;\n        white-space: nowrap;\n      }\n\n      ::slotted(.is-active) {\n        border-bottom-color: var(--vscode-settings-headerForeground);\n        color: var(--vscode-settings-headerForeground);\n      }\n    `;\n  }\n\n  render() {\n    return html`\n      <div class=\"header\" @click=\"${this._onHeaderClick}\">\n        <slot name=\"header\"></slot>\n      </div>\n      <slot></slot>\n    `;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isPrimitive } from '../lib/parts.js';\nimport { directive, NodePart } from '../lit-html.js';\n// For each part, remember the value that was last rendered to the part by the\n// unsafeHTML directive, and the DocumentFragment that was last set as a value.\n// The DocumentFragment is used as a unique key to check if the last value\n// rendered to the part was with unsafeHTML. If not, we'll always re-render the\n// value passed to unsafeHTML.\nconst previousValues = new WeakMap();\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive((value) => (part) => {\n    if (!(part instanceof NodePart)) {\n        throw new Error('unsafeHTML can only be used in text bindings');\n    }\n    const previousValue = previousValues.get(part);\n    if (previousValue !== undefined && isPrimitive(value) &&\n        value === previousValue.value && part.value === previousValue.fragment) {\n        return;\n    }\n    const template = document.createElement('template');\n    template.innerHTML = value; // innerHTML casts to string internally\n    const fragment = document.importNode(template.content, true);\n    part.setValue(fragment);\n    previousValues.set(part, { value, fragment });\n});\n//# sourceMappingURL=unsafe-html.js.map","import { LitElement, html, css, unsafeCSS, property, customElement } from 'lit-element';\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html';\nimport getBaseURL from './utils/getBaseURL';\n\ninterface TreeItemIconConfig {\n  branch?: string,\n  open?: string,\n  leaf?: string,\n}\n\ninterface TreeItem {\n  label: string;\n  subItems?: TreeItem[];\n  open?: boolean;\n  selected?: boolean;\n  icons?: TreeItemIconConfig;\n  value?: string;\n}\n\nenum ItemType {\n  BRANCH = 'branch',\n  LEAF = 'leaf',\n}\n\nconst ARROW_OUTER_WIDTH = 24;\nconst BASE_URL = getBaseURL();\n\n@customElement('vscode-tree')\nexport class VscodeTree extends LitElement {\n  @property({ type: Array, reflect: false }) data: TreeItem[];\n  @property({ type: Number }) indent: number = 8;\n  @property({ type: Boolean }) arrows: boolean = false;\n\n  private _selectedItem: TreeItem;\n\n  private getItemByPath(path: string): TreeItem {\n    const pathFragments: number[] = path.split('/').map(el => Number(el));\n    let current: TreeItem[] = this.data;\n    let item: TreeItem;\n\n    pathFragments.forEach((el, i) => {\n      if (i === pathFragments.length - 1) {\n        item = current[el];\n      } else {\n        current = current[el].subItems;\n      }\n    });\n\n    return item;\n  }\n\n  private getItemType(item: TreeItem): ItemType {\n    if (item.subItems && Array.isArray(item.subItems) && item.subItems.length > 0) {\n      return ItemType.BRANCH;\n    }\n\n    return ItemType.LEAF;\n  }\n\n  private getIconName(element: TreeItem): string | undefined {\n    if (!element.icons) {\n      return undefined;\n    }\n\n    const { icons } = element;\n    const itemType = this.getItemType(element);\n    const isOpen = element.open || false;\n\n    if (itemType === ItemType.BRANCH && isOpen) {\n      return icons.open || undefined;\n    } else if (itemType === ItemType.BRANCH && !isOpen) {\n      return icons.branch || undefined;\n    } else if (itemType === ItemType.LEAF) {\n      return icons.leaf || undefined;\n    } else {\n      return undefined;\n    }\n  }\n\n  private renderTreeItem({\n    indentLevel,\n    label,\n    path,\n    iconName,\n    open = false,\n    itemType,\n    selected = false,\n    subItems,\n  }: {\n    indentLevel: number;\n    label: string;\n    path: number[];\n    iconName: string;\n    open: boolean;\n    itemType: ItemType;\n    selected: boolean;\n    subItems: TreeItem[];\n  }) {\n    const arrowClassname = open ? 'icon-arrow open' : 'icon-arrow';\n    const contentsClasses = ['contents'];\n    const liClasses = open ? ['open'] : [];\n    const indentSize = indentLevel * this.indent;\n    const padLeft = this.arrows && itemType === ItemType.LEAF ?\n      ARROW_OUTER_WIDTH + indentSize : indentSize;\n    const arrowMarkup = this.arrows && itemType === ItemType.BRANCH ?\n      `<i class=\"${arrowClassname}\"></i>` : '';\n    const iconMarkup = iconName ?\n      `<vscode-icon name=\"${iconName}\" class=\"label-icon\"></vscode-icon>` : '';\n    const subTreeMarkup = open && itemType === ItemType.BRANCH ?\n      `<ul>${this.renderTree(subItems, path)}</ul>` :\n      '';\n\n    liClasses.push(itemType === ItemType.LEAF ? 'leaf' : 'branch');\n\n    if (selected) {\n      contentsClasses.push('selected');\n    }\n\n    return `\n      <li data-path=\"${path.join('/')}\" class=\"${liClasses.join(' ')}\">\n        <span class=\"${contentsClasses.join(' ')}\" style=\"padding-left: ${padLeft}px;\">\n          ${arrowMarkup}\n          ${iconMarkup}\n          ${label}\n        </span>\n        ${subTreeMarkup}\n      </li>\n    `;\n  }\n\n  private renderTree(tree: TreeItem[], oldPath: number[] = []) {\n    let ret = '';\n\n    if (!tree) {\n      return ret;\n    }\n\n    tree.forEach((element, index) => {\n      const path = [...oldPath, index];\n      const indentLevel = path.length - 1;\n      const itemType = this.getItemType(element);\n      const iconName = this.getIconName(element);\n      const { label, open = false, selected = false, subItems = [] } = element;\n\n      ret += this.renderTreeItem({\n        indentLevel,\n        label,\n        path,\n        open,\n        iconName,\n        itemType,\n        selected,\n        subItems,\n      });\n    });\n\n    return ret;\n  }\n\n  private toggleSubTreeOpen(item: TreeItem) {\n    if (!item.subItems) {\n      return;\n    }\n\n    item.open = !item.open;\n  }\n\n  private selectTreeItem(item: TreeItem) {\n    if (this._selectedItem) {\n      this._selectedItem.selected = false;\n    }\n\n    this._selectedItem = item;\n    item.selected = true;\n  }\n\n  private closeSubTreeRecursively(tree: TreeItem[]) {\n    tree.forEach((item) => {\n      item.open = false;\n\n      if (item.subItems && item.subItems.length > 0) {\n        this.closeSubTreeRecursively(item.subItems);\n      }\n    });\n  }\n\n  private emitSelectEvent(item: TreeItem, path: string) {\n    const { icons, label, open, value } = item;\n    const detail = {\n      icons,\n      itemType: this.getItemType(item),\n      label,\n      open: open || false,\n      value: value || label,\n      path,\n    };\n\n    this.dispatchEvent(new CustomEvent('vsc-select', {\n      bubbles: true,\n      composed: true,\n      detail,\n    }));\n  }\n\n  private onComponentClick(event: MouseEvent) {\n    const composedPath = event.composedPath();\n    const targetElement = composedPath.find(\n      (el: HTMLElement) => el.tagName && el.tagName.toUpperCase() === 'LI'\n    );\n\n    if (targetElement) {\n      const path = (<HTMLLIElement>targetElement).dataset.path;\n      const item = this.getItemByPath(path);\n\n      this.toggleSubTreeOpen(item);\n      this.selectTreeItem(item);\n      this.emitSelectEvent(item, path);\n      this.requestUpdate();\n    }\n  }\n\n  public closeAll() {\n    this.closeSubTreeRecursively(this.data);\n    this.requestUpdate();\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n        outline: none;\n      }\n\n      li {\n        list-style: none;\n      }\n\n      ul,\n      li {\n        margin: 0;\n        padding: 0;\n      }\n\n      .contents {\n        align-items: center;\n        display: flex;\n        line-height: 22px;\n      }\n\n      .contents:hover {\n        background-color: var(--vscode-list-hoverBackground);\n        cursor: pointer;\n        font-family: var(--vscode-font-family);\n        font-size: var(--vscode-font-size);\n        font-weight: var(--vscode-font-weight);\n      }\n\n      .contents.selected {\n        background-color: var(--vscode-list-focusBackground);\n      }\n\n      :host(:focus) .contents.selected {\n        background-color: var(--vscode-list-activeSelectionBackground);\n        color: var(--vscode-list-activeSelectionForeground);\n      }\n\n      .icon-arrow {\n        background-position: 3px center;\n        background-repeat: no-repeat;\n        display: block;\n        height: 22px;\n        margin: 0 8px 0 0;\n        width: 16px;\n      }\n\n      :host-context(.vscode-light) .icon-arrow {\n        background-image: url(${unsafeCSS(BASE_URL)}icons/light/chevron-right.svg);\n      }\n\n      :host-context(.vscode-dark) .icon-arrow,\n      :host-context(.vscode-high-contrast) .icon-arrow {\n        background-image: url(${unsafeCSS(BASE_URL)}icons/dark/chevron-right.svg);\n      }\n\n      :host-context(.vscode-light) .icon-arrow.open {\n        background-image: url(${unsafeCSS(BASE_URL)}icons/light/chevron-down.svg);\n      }\n\n      :host-context(.vscode-dark) .icon-arrow.open,\n      :host-context(.vscode-high-contrast) .icon-arrow.open {\n        background-image: url(${unsafeCSS(BASE_URL)}icons/dark/chevron-down.svg);\n      }\n\n      .label-icon {\n        display: block;\n        margin-right: 6px;\n      }\n    `;\n  };\n\n  render() {\n    return html`\n      <div @click=\"${this.onComponentClick}\">\n        <ul>\n          ${unsafeHTML(this.renderTree(this.data))}\n        </ul>\n      </div>\n    `;\n  }\n}\n"],"names":["directives","WeakMap","directive","f","args","d","set","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","start","end","n","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","[object Object]","result","element","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isPrimitive","value","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","v","t","setAttribute","_getValue","committer","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","key","join","getTemplateElement","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","templateElement","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","Object","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","finalized","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","defineProperty","oldValue","_requestUpdate","configurable","enumerable","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","_hasConnected","performUpdate","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","_getUpdateComplete","size","_propertyToAttribute","customElement","classOrDescriptor","clazz","define","legacyCustomElement","descriptor","kind","elements","standardCustomElement","standardProperty","placement","initializer","assign","legacyProperty","proto","property","protoOrDescriptor","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","styleSheet","_styleSheet","replaceSync","unsafeCSS","css","reduce","acc","idx","textFromCSSResult","flattenStyles","flat","Infinity","arrayFlat","LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","styleElement","templateResult","render","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","appendInto","litRender","delete","VscodeCheckbox","Date","valueOf","floor","checked","dispatchEvent","CustomEvent","detail","label","bubbles","composed","icon","check","_uid","onElementClick","__decorate","classMapCache","classMap","classInfo","className","classList","oldInfo","remove","VscodeCollapsible","open","classes","collapsible","tabIndex","title","onHeaderClick","VscodeContextMenu","menu","keybinding","separator","tabindex","onItemClick","show","VscodeContextMenuItem","VscodeFormControl","VscodeFormDescription","VscodeFormItem","memoizedURL","VscodeFormLabel","getBaseURL","matches","src","BASE_URL","VscodeIcon","Severity","InputType","VscodeInputbox","focused","eventTarget","target","resizeTextareaIfRequired","br","getBoundingClientRect","x","clientX","_textareaDefaultCursor","left","width","BORDER_WIDTH","requestUpdate","multiline","newLineChars","numLines","_currentLines","min","max","lines","maxLines","_severity","DEFAULT","_type","TEXT","severity","val","oldVal","INFO","WARNING","ERROR","COLOR","DATE","DATETIME_LOCAL","EMAIL","FILE","MONTH","NUMBER","PASSWORD","TEL","TIME","URL","WEEK","textarea","onInputFocus","onInputBlur","onInputChange","onTextareaMouseMove","cursor-default","placeholder","input","textareaHeight","message","containerClass","VscodeOption","_mainSlot","shadowRoot","_onSlotChange","bind","innerText","VscodePanel","then","scrollableContainer","onScrollableContainerScroll","scrolled","scrollTop","shadowClasses","shadow","visible","VscodeSelect","selectedIndex","_options","_currentLabel","_onClickOutside","nodes","assignedNodes","ELEMENT_NODE","optElements","filter","el","lastInsertedIndex","lastInserted","dataset","_onOptionClick","_onOptionMouseEnter","_onOptionMouseLeave","_onOptionSlotChange","_showDropdown","_toogleDropdown","_currentDescription","description","optionElement","composedPath","descriptionTemplate","optionsTemplate","op","display","_onFaceClick","VscodeTabs","assignedElements","selected","_headerSlot","toggle","_setActiveTab","_onSlotChanged","_onHeaderClick","previousValues","unsafeHTML","previousValue","ItemType","VscodeTree","path","pathFragments","current","subItems","BRANCH","LEAF","icons","itemType","getItemType","isOpen","leaf","branch","indentLevel","iconName","arrowClassname","contentsClasses","liClasses","indentSize","indent","padLeft","arrows","arrowMarkup","iconMarkup","subTreeMarkup","renderTree","tree","oldPath","ret","getIconName","renderTreeItem","_selectedItem","closeSubTreeRecursively","targetElement","find","toUpperCase","getItemByPath","toggleSubTreeOpen","selectTreeItem","emitSelectEvent","onComponentClick"],"mappings":"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"}